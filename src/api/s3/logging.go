package s3

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"context"
	"mime/multipart"
	"time"

	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
)

type logging struct {
	logger  log.Logger
	next    Service
	traceId string
}

func (s *logging) ShareGen(ctx context.Context, bucketName, targetPath string, expireMinute int64) (url string, err error) {
	defer func(begin time.Time) {
		_ = s.logger.Log(
			s.traceId, ctx.Value(s.traceId),
			"method", "ShareGen", "bucketName", bucketName, "targetPath", targetPath, "expireMinute", expireMinute,
			"took", time.Since(begin),
			"err", err,
		)
	}(time.Now())
	return s.next.ShareGen(ctx, bucketName, targetPath, expireMinute)
}

func (s *logging) Upload(ctx context.Context, bucketName string, targetPath string, file multipart.File, header string) (err error) {
	defer func(begin time.Time) {
		_ = s.logger.Log(
			s.traceId, ctx.Value(s.traceId),
			"method", "Upload",

			"bucketName", bucketName,

			"targetPath", targetPath,

			"file", file,

			"header", header,

			"took", time.Since(begin),
			"err", err,
		)
	}(time.Now())
	return s.next.Upload(ctx, bucketName, targetPath, file, header)
}

func NewLogging(logger log.Logger, traceId string) Middleware {
	logger = log.With(logger, "api.s3", "logging")
	return func(next Service) Service {
		return &logging{
			logger:  level.Info(logger),
			next:    next,
			traceId: traceId,
		}
	}
}
