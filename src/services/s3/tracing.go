package s3

// Code generated by gowrap. DO NOT EDIT.
// template:
// gowrap: http://github.com/fitan/gowrap

import (
	"github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"

	"context"

	"mime/multipart"
)

type tracing struct {
	next   Service
	tracer opentracing.Tracer
}

func (s *tracing) ShareGen(ctx context.Context, bucketName, targetPath string, expireMinute int64) (url string, err error) {
	span, ctx := opentracing.StartSpanFromContextWithTracer(ctx, s.tracer, "ShareGen", opentracing.Tag{
		Key:   string(ext.Component),
		Value: "api.s3",
	})
	defer func() {
		span.LogKV(
			"bucketName", bucketName, "targetPath", targetPath, "expireMinute", expireMinute, "url", url, "err", err,
		)
		span.SetTag(string(ext.Error), err != nil)
		span.Finish()
	}()
	return s.next.ShareGen(ctx, bucketName, targetPath, expireMinute)
}

func (s *tracing) Upload(ctx context.Context, bucketName string, targetPath string, file multipart.File, header string) (err error) {
	span, ctx := opentracing.StartSpanFromContextWithTracer(ctx, s.tracer, "Upload", opentracing.Tag{
		Key:   string(ext.Component),
		Value: "api.s3",
	})
	defer func() {
		span.LogKV(
			"bucketName", bucketName, "targetPath", targetPath, "file", file, "header", header,
			"err", err,
		)
		span.SetTag(string(ext.Error), err != nil)
		span.Finish()
	}()
	return s.next.Upload(ctx, bucketName, targetPath, file, header)
}

func NewTracing(otTracer opentracing.Tracer) Middleware {
	return func(next Service) Service {
		return &tracing{
			next:   next,
			tracer: otTracer,
		}
	}
}
